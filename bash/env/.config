#!/bin/bash

# Content to add to the log file at the end of sourcing
temp_log_content="" 

# Only Source files that are above this priority 1(highest)-5(lowest)
SOURCE_PRIORITY=2 

#Enable Extended global commands ## Unset via -u
shopt -s extglob 


if [[ "$OSTYPE" == "linux-android" ]]; then #isMobile
  SYS_TYPE="mobile"
  SSH_ENV="bloodweb-mob@$(2>/dev/null ifconfig | grep inet | tail -1 | awk '{print $2}')"
  sshd # enable mobile SSH

elif [[ "$OSTYPE" == *"linux-gnu"* ]]; then #Provably Linux pc
  SYS_TYPE="pc"
  SSH_ENV="$USER@$(hostname -I | awk '{print $1}')"  # removes trailing whitespace and second IP

else # Mac / Windows / Non(GNU)-linux
  echo "OS:$OSTYPE is currently not compatible with BloodBash. "
fi
#########################   SOURCING   ##########################
source ~/c/bash/env/file_src.sh 
# Log ver and device
log_env_state


blogging () { 
  # recursive logging for prior code >> rename me  
  # [[ "$linebreak_dbglog" == false ]] && toggle_bool "linebreak_dbglog" && toggled_lb=true

  # Neofetch installed -> DISPLAY
  #[[ $(has_package neofetch) == true ]] && neofetch

  dbg_log "Available Terminals: $AVAILABLE_TERMINALS" "$env_advanced_debugging" 
  dbg_log "$(echo -e "Repo Size: Min=${GREEN}$LOCAL_REPO_SIZE${NORMAL} Max=${RED}$TOTAL_REPO_SIZE "${NORMAL})" "$env_advanced_debugging"
  dbg_log "$(echo -e "Assumed device: *${BOLDER}$SYS_TYPE${NORMAL}*")" true 
  #dbg_log "Compiled: $(date +%I:%M%p) $todays_date" true
  dbg_log "Device HAS_INTERNET: $HAS_INTERNET" true 
  dbg_log "$(echo -e "SSH_ENV: *${NEGATIVE}$SSH_ENV${NORMAL}*")" "$env_advanced_debugging"
  [[ $HAS_WEB_SOCKET == true ]] && dbg_log "$(echo -e "HAS_WEB_SOCKET:TRUE -> WEBPAGE_URL: ${UNDERLINE}$WEBPAGE_URL${NORMAL}")" "$env_advanced_debugging" || dbg_log "HAS_WEB_SOCKET: $HAS_WEB_SOCKET" true 

  # Location
  dbg_log "Home(\$HOME): $HOME" true 
  dbg_log "Env is sourced (RC_SOURCING): $RC_SOURCING" true 
  
  # dbg_log "Has Package:$br$(for i in $(cat $HOME/c/bash/var/packages.list); do echo "    *$i: $(has_package "$i") "; done)" true
  #[[ "$build_info_debugging" == true ]] && pull_build_info
  # Backup (backup)
  [[ "$display_graphical_backup" == true ]] && echo "$br" && backup_range_graph
  #dbg_log "Last Stable Backup: $BB_date" "$backup_debugging"echo
  [[ "$toggled_lb" == true ]] && toggle_bool "linebreak_dbglog"
  
 # echo "" && read_todo && echo ""

}


Build_Enviroment () {
  
  [[ ! "$RC_SOURCING" == true && "$addto_sourcing" == true ]] && write_env_to_rc
  # Checks env.sh is in bash.bashrc source / else appends
  
  # Install Critical Packages
  read_and_install_packages

  # Update Todo list
  build_todo
  
  # Run backup Automation
  echo "Backing up on launch: $daily_localbackup_onlaunch"
  [[ "$daily_localbackup_onlaunch" == true ]] && ATB_local # Automated 'local' backup
  
  # Build Keyword Files
  ##write_keys_to "$HOME/c/www/bloodweb.net/Internal/Key_Words.js"
  
  # Write date to last_build_date
  write_date
}

shopt -u extglob #removes Extended commands ## Originally for ENV_ssh
alias 'fan'='fan_file' # find and nano

#break_point "Building Enviroment"

Build_Enviroment # Calls (Pull_build_info, Env_sourcing, Blogging.. etc)

[[ "$GRAPHICAL_STARTUP" == true ]] && blogging
############################################
####### EOF -- Sourcing Additionals ########
############################################

#break_point "Writing Testerino"
echo -e "$testing_file_contents" > $HOME/c/test/test.txt

[[ "$test_functions" == true ]] && source ${MF_tf[path]} #&& src_log "Test_Functions added"
 ## Additional Testing || dbg
[[ "$run_tests" == true ]] && source ${MF_test[path]} && src_log "run_tests"

############################################
#######            EOF            #########
############################################
# log_env_state true # Logs Env end

# Add to log file
if [ -f $TMP_LOG_FILE ]; then
    temp_log_content=$(cat $TMP_LOG_FILE)
   dbg_log "$temp_log_content" true
    rm $TMP_LOG_FILE # Clean up
fi

cd ~/c # Goto working dir

#break_point ".config --EOF"

echo " Debug Log: \$LOG_FILE = $HOME/c/bash/var/debug.log"
write_debug_log "BloodBash Compiling finished: $(date '+%Y-%m-%d %H:%M:%S')"